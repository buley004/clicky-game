{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","checkImage","id","alt","src","image","Wrapper","children","Title","App","state","images","score","shuffle","temp","_this","slice","i","length","j","Math","floor","random","_ref","setState","find","arr","clicked","console","log","endGame","forEach","_this2","this","components_Wrapper","components_Title","map","ImageCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+tBAWeA,MARf,SAAoBC,GAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MACnEN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,GAAGC,IAAKT,EAAMU,gBCChBC,MAJf,SAAiBX,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,iBCG1BC,MAJf,SAAeb,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMY,kBCoEvBE,6MAhEbC,MAAQ,CACNC,SACAC,MAAO,KAITC,QAAU,WAGR,IAFA,IAAIC,EAAOC,EAAKL,MAAMC,OAAOK,QAEpBC,EAAIH,EAAKI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADAM,EAEnB,CAACT,EAAKK,GAAIL,EAAKG,IAAnCH,EAAKG,GAFkCM,EAAA,GAE9BT,EAAKK,GAFyBI,EAAA,GAI1CR,EAAKS,SAAS,CAAEb,OAAQG,OAI1Bb,WAAa,SAACC,GACZa,EAAKL,MAAMC,OAAOc,KAAK,SAACC,EAAKT,GAE3B,GAAGS,EAAIxB,KAAOA,EAAI,CAEhB,IAAoC,IAAjCa,EAAKL,MAAMC,OAAOM,GAAGU,QAMtB,OALAZ,EAAKL,MAAMC,OAAOM,GAAGU,SAAU,EAG/BZ,EAAKS,SAAS,CAACZ,MAAOG,EAAKL,MAAME,MAAQ,IACzCG,EAAKF,WACE,EAEPe,QAAQC,IAAI,YAEZd,EAAKe,gBAObA,QAAU,WACRf,EAAKS,SAAS,CAACZ,MAAO,IACtBG,EAAKL,MAAMC,OAAOoB,QAAQ,SAAA1B,GAAK,OAAIA,EAAMsB,SAAU,IACnDZ,EAAKF,mFAIE,IAAAmB,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAACoC,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,eAAeF,KAAKvB,MAAME,OACzBqB,KAAKvB,MAAMC,OAAOyB,IAAI,SAAA/B,GAAK,OAC1BT,EAAAC,EAAAC,cAACuC,EAAD,CACExB,QAASmB,EAAKnB,QACdZ,WAAY+B,EAAK/B,WACjBC,GAAIG,EAAMH,GACVoC,IAAKjC,EAAMH,GACXG,MAAOA,EAAMA,kBA1DPkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d8dac570.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n      <div className=\"img-container\" onClick={() => props.checkImage(props.id)}>\n        <img alt=\"\" src={props.image} />\n      </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  // Setting this.state.images to the images json array\n  state = {\n    images,\n    score: 0\n  };\n\n  //function to shuffle the image order\n  shuffle = () => {\n    let temp = this.state.images.slice();\n    \n    for (let i = temp.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [temp[i], temp[j]] = [temp[j], temp[i]];\n    }\n    this.setState({ images: temp });\n  }\n\n  //function to check if image has already been clicked and update\n  checkImage = (id) => {\n    this.state.images.find((arr, i) => {\n      //find clicked image in array\n      if(arr.id === id) {\n        //check if image has been clicked\n        if(this.state.images[i].clicked === false) {\n          this.state.images[i].clicked = true;\n          \n          //update score and shuffle array\n          this.setState({score: this.state.score + 1});\n          this.shuffle();\n          return true;\n        } else {\n          console.log(\"You lose\");\n          //call end game function\n          this.endGame();\n        }\n      }\n    });\n  }\n\n  //function to reset game\n  endGame = () => {\n    this.setState({score: 0});\n    this.state.images.forEach(image => image.clicked = false);\n    this.shuffle();\n  }\n\n  // Map over this.state.images and render an ImageCard component for each image object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Score: {this.state.score}</Title>\n        {this.state.images.map(image => (\n          <ImageCard\n            shuffle={this.shuffle}\n            checkImage={this.checkImage}\n            id={image.id}\n            key={image.id}\n            image={image.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}